// Code generated by protoc-gen-go.
// source: kairosdb_types.proto
// DO NOT EDIT!

package kairosdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Represents a kairosdb datapoint
// https://github.com/kairosdb/kairosdb-client/blob/master/src/main/java/org/kairosdb/client/builder/DataPoint.java
type Datapoint struct {
	Timestamp int64   `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (m *Datapoint) Reset()                    { *m = Datapoint{} }
func (m *Datapoint) String() string            { return proto.CompactTextString(m) }
func (*Datapoint) ProtoMessage()               {}
func (*Datapoint) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// Represents a sampling in the QueryMetrics request body
type Sampling struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Unit  string `protobuf:"bytes,2,opt,name=unit" json:"unit,omitempty"`
}

func (m *Sampling) Reset()                    { *m = Sampling{} }
func (m *Sampling) String() string            { return proto.CompactTextString(m) }
func (*Sampling) ProtoMessage()               {}
func (*Sampling) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

// Represents a kairosdb aggregator
// https://kairosdb.github.io/docs/build/html/restapi/Aggregators.html
type Aggregator struct {
	Name          string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AlignSampling bool      `protobuf:"varint,2,opt,name=align_sampling,json=alignSampling" json:"align_sampling,omitempty"`
	Sampling      *Sampling `protobuf:"bytes,3,opt,name=sampling" json:"sampling,omitempty"`
}

func (m *Aggregator) Reset()                    { *m = Aggregator{} }
func (m *Aggregator) String() string            { return proto.CompactTextString(m) }
func (*Aggregator) ProtoMessage()               {}
func (*Aggregator) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Aggregator) GetSampling() *Sampling {
	if m != nil {
		return m.Sampling
	}
	return nil
}

// Represents the group_property in the request
// I've decided that it's not bad
type GroupBy struct {
	Name  string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags  []string          `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Group map[string]string `protobuf:"bytes,3,rep,name=group" json:"group,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GroupBy) Reset()                    { *m = GroupBy{} }
func (m *GroupBy) String() string            { return proto.CompactTextString(m) }
func (*GroupBy) ProtoMessage()               {}
func (*GroupBy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GroupBy) GetGroup() map[string]string {
	if m != nil {
		return m.Group
	}
	return nil
}

// Reprents a kairosdb QueryMetric
// https://kairosdb.github.io/docs/build/html/restapi/QueryMetrics.html#id3
type QueryMetric struct {
	Name        string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags        map[string]*StringList `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GroupBy     []*GroupBy             `protobuf:"bytes,3,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	Aggregators []*Aggregator          `protobuf:"bytes,4,rep,name=aggregators" json:"aggregators,omitempty"`
	Limit       int64                  `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
}

func (m *QueryMetric) Reset()                    { *m = QueryMetric{} }
func (m *QueryMetric) String() string            { return proto.CompactTextString(m) }
func (*QueryMetric) ProtoMessage()               {}
func (*QueryMetric) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *QueryMetric) GetTags() map[string]*StringList {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *QueryMetric) GetGroupBy() []*GroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *QueryMetric) GetAggregators() []*Aggregator {
	if m != nil {
		return m.Aggregators
	}
	return nil
}

type Result struct {
	Name    string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	GroupBy []*GroupBy             `protobuf:"bytes,2,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
	Tags    map[string]*StringList `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Values  []*Datapoint           `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Result) GetGroupBy() []*GroupBy {
	if m != nil {
		return m.GroupBy
	}
	return nil
}

func (m *Result) GetTags() map[string]*StringList {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Result) GetValues() []*Datapoint {
	if m != nil {
		return m.Values
	}
	return nil
}

// Represents a single set of results for a given Query
type Query struct {
	Results []*Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Query) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

// Reprents a QueryMetrics request to kairosdb
// https://kairosdb.github.io/docs/build/html/restapi/QueryMetrics.html#query-properties
type QueryMetricsRequest struct {
	Metrics       []*QueryMetric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
	CacheTime     int64          `protobuf:"varint,2,opt,name=cache_time,json=cacheTime" json:"cache_time,omitempty"`
	StartAbsolute int64          `protobuf:"varint,3,opt,name=start_absolute,json=startAbsolute" json:"start_absolute,omitempty"`
	EndAbsolute   int64          `protobuf:"varint,4,opt,name=end_absolute,json=endAbsolute" json:"end_absolute,omitempty"`
}

func (m *QueryMetricsRequest) Reset()                    { *m = QueryMetricsRequest{} }
func (m *QueryMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryMetricsRequest) ProtoMessage()               {}
func (*QueryMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *QueryMetricsRequest) GetMetrics() []*QueryMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Represents response to kairosdb QueryMetrics request
type QueryMetricsResponse struct {
	Queries []*Query `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
	Errors  []string `protobuf:"bytes,5,rep,name=errors" json:"errors,omitempty"`
}

func (m *QueryMetricsResponse) Reset()                    { *m = QueryMetricsResponse{} }
func (m *QueryMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryMetricsResponse) ProtoMessage()               {}
func (*QueryMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *QueryMetricsResponse) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

type ListMetricNamesRequest struct {
}

func (m *ListMetricNamesRequest) Reset()                    { *m = ListMetricNamesRequest{} }
func (m *ListMetricNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMetricNamesRequest) ProtoMessage()               {}
func (*ListMetricNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type ListMetricNamesResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListMetricNamesResponse) Reset()                    { *m = ListMetricNamesResponse{} }
func (m *ListMetricNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMetricNamesResponse) ProtoMessage()               {}
func (*ListMetricNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

type ListTagNamesRequest struct {
}

func (m *ListTagNamesRequest) Reset()                    { *m = ListTagNamesRequest{} }
func (m *ListTagNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTagNamesRequest) ProtoMessage()               {}
func (*ListTagNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

type ListTagNamesResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListTagNamesResponse) Reset()                    { *m = ListTagNamesResponse{} }
func (m *ListTagNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTagNamesResponse) ProtoMessage()               {}
func (*ListTagNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

type ListTagValuesRequest struct {
}

func (m *ListTagValuesRequest) Reset()                    { *m = ListTagValuesRequest{} }
func (m *ListTagValuesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTagValuesRequest) ProtoMessage()               {}
func (*ListTagValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

type ListTagValuesResponse struct {
	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListTagValuesResponse) Reset()                    { *m = ListTagValuesResponse{} }
func (m *ListTagValuesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTagValuesResponse) ProtoMessage()               {}
func (*ListTagValuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func init() {
	proto.RegisterType((*Datapoint)(nil), "kairosdb.Datapoint")
	proto.RegisterType((*Sampling)(nil), "kairosdb.Sampling")
	proto.RegisterType((*Aggregator)(nil), "kairosdb.Aggregator")
	proto.RegisterType((*GroupBy)(nil), "kairosdb.GroupBy")
	proto.RegisterType((*QueryMetric)(nil), "kairosdb.QueryMetric")
	proto.RegisterType((*Result)(nil), "kairosdb.Result")
	proto.RegisterType((*Query)(nil), "kairosdb.Query")
	proto.RegisterType((*QueryMetricsRequest)(nil), "kairosdb.QueryMetricsRequest")
	proto.RegisterType((*QueryMetricsResponse)(nil), "kairosdb.QueryMetricsResponse")
	proto.RegisterType((*ListMetricNamesRequest)(nil), "kairosdb.ListMetricNamesRequest")
	proto.RegisterType((*ListMetricNamesResponse)(nil), "kairosdb.ListMetricNamesResponse")
	proto.RegisterType((*ListTagNamesRequest)(nil), "kairosdb.ListTagNamesRequest")
	proto.RegisterType((*ListTagNamesResponse)(nil), "kairosdb.ListTagNamesResponse")
	proto.RegisterType((*ListTagValuesRequest)(nil), "kairosdb.ListTagValuesRequest")
	proto.RegisterType((*ListTagValuesResponse)(nil), "kairosdb.ListTagValuesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for KairosDBClient service

type KairosDBClientClient interface {
	ListMetricNames(ctx context.Context, in *ListMetricNamesRequest, opts ...grpc.CallOption) (*ListMetricNamesResponse, error)
	ListTagNames(ctx context.Context, in *ListTagNamesRequest, opts ...grpc.CallOption) (*ListTagNamesResponse, error)
	ListTagValues(ctx context.Context, in *ListTagValuesRequest, opts ...grpc.CallOption) (*ListTagValuesResponse, error)
	QueryMetrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error)
}

type kairosDBClientClient struct {
	cc *grpc.ClientConn
}

func NewKairosDBClientClient(cc *grpc.ClientConn) KairosDBClientClient {
	return &kairosDBClientClient{cc}
}

func (c *kairosDBClientClient) ListMetricNames(ctx context.Context, in *ListMetricNamesRequest, opts ...grpc.CallOption) (*ListMetricNamesResponse, error) {
	out := new(ListMetricNamesResponse)
	err := grpc.Invoke(ctx, "/kairosdb.KairosDBClient/ListMetricNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosDBClientClient) ListTagNames(ctx context.Context, in *ListTagNamesRequest, opts ...grpc.CallOption) (*ListTagNamesResponse, error) {
	out := new(ListTagNamesResponse)
	err := grpc.Invoke(ctx, "/kairosdb.KairosDBClient/ListTagNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosDBClientClient) ListTagValues(ctx context.Context, in *ListTagValuesRequest, opts ...grpc.CallOption) (*ListTagValuesResponse, error) {
	out := new(ListTagValuesResponse)
	err := grpc.Invoke(ctx, "/kairosdb.KairosDBClient/ListTagValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kairosDBClientClient) QueryMetrics(ctx context.Context, in *QueryMetricsRequest, opts ...grpc.CallOption) (*QueryMetricsResponse, error) {
	out := new(QueryMetricsResponse)
	err := grpc.Invoke(ctx, "/kairosdb.KairosDBClient/QueryMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KairosDBClient service

type KairosDBClientServer interface {
	ListMetricNames(context.Context, *ListMetricNamesRequest) (*ListMetricNamesResponse, error)
	ListTagNames(context.Context, *ListTagNamesRequest) (*ListTagNamesResponse, error)
	ListTagValues(context.Context, *ListTagValuesRequest) (*ListTagValuesResponse, error)
	QueryMetrics(context.Context, *QueryMetricsRequest) (*QueryMetricsResponse, error)
}

func RegisterKairosDBClientServer(s *grpc.Server, srv KairosDBClientServer) {
	s.RegisterService(&_KairosDBClient_serviceDesc, srv)
}

func _KairosDBClient_ListMetricNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosDBClientServer).ListMetricNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kairosdb.KairosDBClient/ListMetricNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosDBClientServer).ListMetricNames(ctx, req.(*ListMetricNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KairosDBClient_ListTagNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosDBClientServer).ListTagNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kairosdb.KairosDBClient/ListTagNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosDBClientServer).ListTagNames(ctx, req.(*ListTagNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KairosDBClient_ListTagValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosDBClientServer).ListTagValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kairosdb.KairosDBClient/ListTagValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosDBClientServer).ListTagValues(ctx, req.(*ListTagValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KairosDBClient_QueryMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KairosDBClientServer).QueryMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kairosdb.KairosDBClient/QueryMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KairosDBClientServer).QueryMetrics(ctx, req.(*QueryMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KairosDBClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kairosdb.KairosDBClient",
	HandlerType: (*KairosDBClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMetricNames",
			Handler:    _KairosDBClient_ListMetricNames_Handler,
		},
		{
			MethodName: "ListTagNames",
			Handler:    _KairosDBClient_ListTagNames_Handler,
		},
		{
			MethodName: "ListTagValues",
			Handler:    _KairosDBClient_ListTagValues_Handler,
		},
		{
			MethodName: "QueryMetrics",
			Handler:    _KairosDBClient_QueryMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("kairosdb_types.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x6f, 0xd3, 0x3c,
	0x14, 0x56, 0xda, 0xf5, 0xeb, 0x74, 0x5f, 0xaf, 0xd7, 0xed, 0xad, 0xa2, 0x8d, 0x6d, 0x91, 0x90,
	0xf8, 0x52, 0x81, 0x0e, 0xa1, 0x89, 0x1b, 0xb4, 0x31, 0xc4, 0x05, 0x0c, 0x81, 0x37, 0x4d, 0x82,
	0x9b, 0x2a, 0xdd, 0xac, 0x2c, 0x5a, 0x9a, 0x04, 0xdb, 0x05, 0xe5, 0xd7, 0x20, 0x7e, 0x01, 0x7f,
	0x87, 0x5f, 0xc2, 0x35, 0x8e, 0x63, 0xc7, 0x49, 0x9b, 0xd1, 0x1b, 0xae, 0xea, 0x1c, 0x3f, 0xcf,
	0x39, 0xcf, 0x79, 0x7c, 0xec, 0x42, 0xef, 0xc6, 0xf5, 0x69, 0xc4, 0xae, 0xc6, 0x23, 0x9e, 0xc4,
	0x84, 0x0d, 0x62, 0x1a, 0xf1, 0x08, 0xb5, 0x75, 0xd4, 0x46, 0xd7, 0x24, 0x88, 0x09, 0x2d, 0xee,
	0x3a, 0x2f, 0xa1, 0x73, 0xe2, 0x72, 0x37, 0x8e, 0xfc, 0x90, 0xa3, 0x6d, 0xe8, 0x70, 0x7f, 0x42,
	0x18, 0x77, 0x27, 0x71, 0xdf, 0xda, 0xb3, 0xee, 0xd5, 0xb1, 0x09, 0xa0, 0x1e, 0x34, 0xbe, 0xba,
	0xc1, 0x94, 0xf4, 0x6b, 0x62, 0xc7, 0xc2, 0xd9, 0x87, 0xf3, 0x0c, 0xda, 0x67, 0x62, 0x37, 0xf0,
	0x43, 0xcf, 0x20, 0x52, 0x6e, 0x47, 0x21, 0x10, 0x82, 0xa5, 0x69, 0xe8, 0x73, 0x49, 0xeb, 0x60,
	0xb9, 0x76, 0xbe, 0x01, 0x1c, 0x79, 0x1e, 0x25, 0x9e, 0xcb, 0x23, 0x9a, 0x22, 0x42, 0x77, 0xa2,
	0x69, 0x72, 0x8d, 0xee, 0xc2, 0xaa, 0x1b, 0xf8, 0x5e, 0x38, 0x62, 0x2a, 0xbb, 0xe4, 0xb7, 0xf1,
	0x8a, 0x8c, 0xe6, 0x25, 0x07, 0xd0, 0xce, 0x01, 0x75, 0x01, 0xe8, 0x0e, 0xd1, 0x40, 0x37, 0x3c,
	0xd0, 0x28, 0x9c, 0x63, 0x9c, 0xef, 0x16, 0xb4, 0xde, 0xd0, 0x68, 0x1a, 0x1f, 0x27, 0x95, 0x65,
	0x45, 0x8c, 0xbb, 0x1e, 0x13, 0xc5, 0xea, 0x69, 0x2c, 0x5d, 0xa3, 0x21, 0x34, 0xbc, 0x94, 0x22,
	0x0a, 0xd4, 0x45, 0x81, 0x6d, 0x53, 0x40, 0x65, 0xca, 0x7e, 0x5f, 0x87, 0x9c, 0x26, 0x38, 0x83,
	0xda, 0x87, 0x00, 0x26, 0x88, 0xd6, 0xa1, 0x7e, 0x43, 0x12, 0x55, 0x28, 0x5d, 0x96, 0xcd, 0xd4,
	0x56, 0xbd, 0xa8, 0x1d, 0x5a, 0xce, 0x8f, 0x1a, 0x74, 0x3f, 0x4e, 0x09, 0x4d, 0x4e, 0x09, 0xa7,
	0xfe, 0x65, 0xa5, 0xca, 0x83, 0x82, 0xca, 0xee, 0x70, 0xd7, 0x08, 0x2a, 0x10, 0x07, 0xe7, 0x02,
	0x91, 0x69, 0xca, 0xda, 0x78, 0x04, 0x6d, 0xa9, 0x6d, 0x34, 0x4e, 0x54, 0x27, 0xff, 0xcd, 0x75,
	0x82, 0x5b, 0x9e, 0x32, 0xe7, 0x39, 0x74, 0xdd, 0xfc, 0x84, 0x58, 0x7f, 0x49, 0x12, 0x7a, 0x86,
	0x60, 0x8e, 0x0f, 0x17, 0x81, 0x69, 0x63, 0x81, 0x3f, 0x11, 0xc7, 0xdd, 0x90, 0xf3, 0x93, 0x7d,
	0xd8, 0xa7, 0xd0, 0xc9, 0xe5, 0x54, 0xb8, 0xf1, 0xa0, 0xe8, 0x46, 0xa9, 0xcc, 0x99, 0x68, 0x25,
	0xf4, 0xde, 0xf9, 0x8c, 0x17, 0x3d, 0xfa, 0x6d, 0x41, 0x13, 0x13, 0x36, 0x0d, 0x78, 0xa5, 0x3d,
	0xc5, 0x4e, 0x6b, 0x0b, 0x3b, 0x1d, 0x28, 0x33, 0x33, 0x4f, 0x6c, 0x83, 0xcc, 0x2a, 0xcc, 0xf9,
	0xf8, 0x10, 0x9a, 0x52, 0x89, 0x36, 0x65, 0xc3, 0x30, 0xf2, 0xab, 0x84, 0x15, 0xe4, 0x5f, 0x37,
	0x7e, 0x00, 0x0d, 0x79, 0xc4, 0x82, 0xd8, 0xa2, 0x52, 0x1e, 0x13, 0xe9, 0x52, 0x15, 0xeb, 0xb3,
	0xba, 0xb1, 0x06, 0x38, 0x3f, 0x2d, 0xd8, 0x28, 0x0c, 0x06, 0xc3, 0xe4, 0x8b, 0x90, 0xc6, 0xd1,
	0x63, 0x68, 0x4d, 0xb2, 0x88, 0xca, 0xb1, 0x59, 0x39, 0x48, 0x58, 0xa3, 0xd0, 0x0e, 0xc0, 0xa5,
	0x7b, 0x79, 0x4d, 0x46, 0xe9, 0xa3, 0x20, 0x25, 0x8b, 0x07, 0x42, 0x46, 0xce, 0xfd, 0xec, 0xca,
	0x8a, 0x97, 0x82, 0xf2, 0x91, 0x3b, 0x66, 0x51, 0x30, 0xe5, 0x44, 0xde, 0xc8, 0x3a, 0x5e, 0x91,
	0xd1, 0x23, 0x15, 0x44, 0xfb, 0xb0, 0x4c, 0xc2, 0x2b, 0x03, 0x5a, 0x92, 0xa0, 0xae, 0x88, 0x69,
	0x88, 0xf3, 0x09, 0x7a, 0x65, 0xc1, 0x2c, 0x8e, 0x42, 0x46, 0xd0, 0x7d, 0x68, 0x09, 0xe9, 0xd4,
	0x27, 0x5a, 0xf1, 0xda, 0x8c, 0x62, 0xac, 0xf7, 0xd1, 0x16, 0x34, 0x09, 0xa5, 0xe9, 0xe8, 0x36,
	0xe4, 0x55, 0x56, 0x5f, 0x4e, 0x1f, 0xb6, 0x52, 0x53, 0xb3, 0xcc, 0xef, 0xc5, 0xb4, 0x68, 0x3b,
	0x84, 0xb7, 0xff, 0xcf, 0xed, 0xa8, 0xba, 0xfd, 0xb2, 0xdb, 0x1d, 0xe3, 0xed, 0x26, 0x6c, 0xa4,
	0x24, 0x71, 0xc6, 0xa5, 0x5c, 0x4f, 0xa0, 0x57, 0x0e, 0x2f, 0x4c, 0xb4, 0x95, 0x33, 0x2e, 0xe4,
	0xe4, 0xe8, 0x4c, 0x4f, 0x61, 0x73, 0x26, 0xbe, 0x28, 0xd5, 0xf0, 0x57, 0x0d, 0x56, 0xdf, 0x4a,
	0x5b, 0x4e, 0x8e, 0x5f, 0x05, 0x3e, 0x11, 0x2f, 0xfb, 0x05, 0xac, 0xcd, 0xf4, 0x86, 0xf6, 0x8c,
	0x75, 0xd5, 0x86, 0xd8, 0xfb, 0x7f, 0x41, 0x28, 0x11, 0xa7, 0xb0, 0x5c, 0xec, 0x13, 0xed, 0x94,
	0x29, 0x33, 0xb6, 0xd8, 0x77, 0x6e, 0xdb, 0x56, 0xe9, 0x3e, 0xc0, 0x4a, 0xa9, 0x59, 0x34, 0x4f,
	0x28, 0xb9, 0x63, 0xef, 0xde, 0xba, 0x6f, 0x04, 0x16, 0x27, 0xa9, 0x28, 0xb0, 0xe2, 0x4a, 0x14,
	0x05, 0x56, 0x0d, 0xe0, 0x31, 0x7c, 0xce, 0xff, 0x4e, 0xc7, 0x4d, 0xf9, 0x0f, 0x7a, 0xf0, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x97, 0xd7, 0xfb, 0xd2, 0x77, 0x07, 0x00, 0x00,
}
